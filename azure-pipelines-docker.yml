trigger:
 branches:
   include:
     - master
 paths:
   include:
     - backend

pool: myserver

stages:
- stage: Build
  displayName: 'Build & Test stage'
  jobs:
  - job: 'build_local'
    displayName: 'Build project with .net cli'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk from global.json'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
        workingDirectory: 'backend/src'
    - task: DotNetCoreCLI@2
      displayName: 'Build WebAPI'
      inputs:
        command: 'build'
        arguments: 'Auctionhouse.WebAPI.slnf'
        workingDirectory: 'backend/src'
    - task: DotNetCoreCLI@2
      displayName: 'Run domain tests'
      inputs:
        command: 'test'
        projects: '**/Test.*Domain'
        testRunTitle: 'Domain tests'
        workingDirectory: 'backend/src'
- stage: DockerBuild
  displayName: 'Docker build stage'
  jobs:
  - job: 'build_docker_infrastructure'
    displayName: 'Build infrastructure docker images'
    steps:
    - task: DockerCompose@0
      displayName: 'Build images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'VPSDockerRegistry'
        dockerComposeFile: 'backend/src/compose/infrastructure/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'build'
    - task: DockerCompose@0
      displayName: 'Push images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'VPSDockerRegistry'
        dockerComposeFile: 'backend/src/compose/infrastructure/docker-compose.yml'
        action: 'Push services'
  - job: 'build_docker_infrastructure_mongodb'
    displayName: 'Build mongodb docker images'
    steps:
    - task: DockerCompose@0
      displayName: 'Build images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'VPSDockerRegistry'
        dockerComposeFile: 'backend/src/compose/infrastructure/mongodb/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'build'
    - task: DockerCompose@0
      displayName: 'Push images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'VPSDockerRegistry'
        dockerComposeFile: 'backend/src/compose/infrastructure/mongodb/docker-compose.yml'
        action: 'Push services'
  - job: 'build_docker_webapi'
    displayName: 'Build Web API docker images'
    steps:
    - task: DockerCompose@0
      displayName: 'Build images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'VPSDockerRegistry'
        dockerComposeFile: 'backend/src/compose/webAPI/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'build'
    - task: DockerCompose@0
      displayName: 'Push images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'VPSDockerRegistry'
        dockerComposeFile: 'backend/src/compose/webAPI/docker-compose.yml'
        action: 'Push services'
  - job: 'publish_artifacts'
    displayName: 'Publish build artifacts'
    dependsOn: ['build_docker_webapi', 'build_docker_infrastructure', 'build_docker_infrastructure_mongodb'] 
    steps:
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'backend/src/compose'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/compose'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
- stage: Deploy
  displayName: 'Deploy Prod stage'
  jobs:
  - deployment: 'VPSDeployment'   # name of the deployment job, A-Z, a-z, 0-9, and underscore. The word "deploy" is a keyword and is unsupported as the deployment name.
    displayName: 'VPS Deployment' 
    environment: vps-production
    strategy:
      runOnce:    #rolling, canary are the other strategies that are supported
        deploy:
          steps:
            - task: DownloadBuildArtifacts@1
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'
            - task: AzureKeyVault@2
              inputs:
                azureSubscription: 'Azure for Students(54a8b190-aefa-4989-849f-3931ec46cb62)'
                KeyVaultName: 'auctionhouse-kv-prod'
                SecretsFilter: '*'
                RunAsPreJob: false
            - task: SSH@0
              displayName: 'Create docker secrets'
              inputs:
                sshEndpoint: 'OVH_vps'
                runOptions: 'commands'
                commands: |
                  (docker secret rm envoy_ssl_pkcs12 2>/dev/null && echo $(pekalam-me-12) | base64 --decode | docker secret create envoy_ssl_pkcs12 -) || true;
                  (docker secret rm front_ssl_chain 2>/dev/null && echo $(pekalam-me-12) | base64 --decode | openssl pkcs12 -password pass: -clcerts -nokeys | docker secret create front_ssl_chain -) || true;
                  (docker secret rm front_ssl_private 2>/dev/null && echo $(pekalam-me-12) | base64 --decode | openssl pkcs12 -password pass: -nocerts -nodes | docker secret create front_ssl_private -) || true;
                  echo $(mongocluster-keyfile) >> /home/auctionhouse/auctionhouse/test/key;
                  (docker secret rm mongocluster-keyfile 2>/dev/null || true) && (echo $(mongocluster-keyfile) | docker secret create mongocluster-keyfile -);
                readyTimeout: '20000'
            - task: CopyFilesOverSSH@0
              displayName: 'Copy artifacts to target machine'
              inputs:
                sshEndpoint: 'OVH_vps'
                sourceFolder: '$(System.ArtifactsDirectory)/drop/compose'
                contents: '**'
                targetFolder: '/home/auctionhouse/auctionhouse/test'
                readyTimeout: '20000'
            - task: SSH@0
              displayName: 'Login to private registry'
              env:
                PEKALAM-REGISTRY-PASS: $(pekalam-registry-pass)
              inputs:
                sshEndpoint: 'OVH_vps'
                runOptions: 'commands'
                commands: '(docker login -u pekalam -p $(PEKALAM-REGISTRY-PASS) pekalam.me:5000 2>login_errorlog.txt || (cat login_errorlog.txt && exit 1)) && (test $(wc -l login_errorlog.txt | cut -d " " -f1) -gt 0 || rm login_errorlog.txt)'
                failOnStdErr: false
                readyTimeout: '20000'
            - task: SSH@0
              displayName: 'Deploy auctionhouse'
              inputs:
                sshEndpoint: 'OVH_vps'
                runOptions: 'commands'
                commands: 'cd /home/auctionhouse/auctionhouse/test && (DOCKER_REGISTRY="pekalam.me:5000/" docker stack deploy --with-registry-auth -c front/docker-compose.yml -c front/docker-compose.prod.yml -c infrastructure/docker-compose.yml -c infrastructure/docker-compose.prod.yml -c infrastructure/mongodb/docker-compose.yml -c infrastructure/mongodb/docker-compose.prod.yml -c webAPI/docker-compose.yml -c webAPI/docker-compose.prod.yml auctionhouse 2>deploy_errorlog.txt || (cat deploy_errorlog.txt && exit 1)) && (test $(wc -l deploy_errorlog.txt | cut -d " " -f1) -gt 0 || rm deploy_errorlog.txt)'
                failOnStdErr: false
                readyTimeout: '20000'
            - task: SSH@0
              displayName: 'Run post-deployment script on target machine'
              inputs:
                sshEndpoint: 'OVH_vps'
                runOptions: 'commands'
                commands: 'bash /home/auctionhouse/auctionhouse/post-deployment.sh'
                readyTimeout: '20000'
            