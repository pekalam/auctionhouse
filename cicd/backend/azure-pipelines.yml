trigger:
 branches:
   include:
     - master
 paths:
   include:
     - backend

variables:
  - name: default-vm-image
    value: ubuntu-latest
    readonly: true
  - name: command-db-build-vm-image
    value: windows-latest
    readonly: true
  - name: MSBuildBinPath
    value: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\
    readonly: true

parameters:
  - name: pool
    type: string
    displayName: Pool
    default: default
    values:
      - default
      - azure-vm
      - myserver
      - pipeline-utils
  - name: docker-registry
    type: string
    displayName: Docker registry
    default: AuctionhouseDockerRegistry
    values:
      - AuctionhouseDockerRegistry
      - VPSDockerRegistry



stages:
- stage: Build
  displayName: 'Build & Test stage'
  jobs:
  - job: 'build_local'
    displayName: 'Build project with .net cli'
    ${{ if eq(parameters['pool'], 'default') }}:
      pool:
        vmImage: ${{ variables['default-vm-image'] }}
    ${{ else }}:
      pool: ${{ parameters['pool'] }}
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk from global.json'
      inputs:
        packageType: 'sdk'
        workingDirectory: '$(System.DefaultWorkingDirectory)/backend/src'
        useGlobalJson: true
    - task: DotNetCoreCLI@2
      displayName: 'Build WebAPI'
      inputs:
        command: 'build'
        workingDirectory: '$(System.DefaultWorkingDirectory)/backend/src'
        arguments: 'Auctionhouse.WebAPI.slnf'
    - task: DotNetCoreCLI@2
      displayName: 'Run domain tests'
      inputs:
        command: 'test'
        workingDirectory: '$(System.DefaultWorkingDirectory)/backend/src'
        projects: '**/Test.*Domain'
        testRunTitle: 'Domain tests'
- stage: DockerBuild
  displayName: 'Docker build stage'
  jobs:
  - job: 'build_command_db'
    displayName: 'Build command DB'
    pool:
      vmImage: ${{ variables['command-db-build-vm-image'] }}
    steps:
    - task: PowerShell@2
      env:
        MSBuildBinPath: ${{ variables.MSBuildBinPath }}
      inputs:
        filePath: 'backend\src\Database\Command\Scripts\build\BuildCsproj.ps1'
        workingDirectory: 'backend\src\Database\Command\Scripts\build'
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
        workingDirectory: 'backend\src'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global dotnet-ef'
    - task: PowerShell@2
      inputs:
        filePath: 'backend\src\Database\Command\Scripts\build\Add-EventOutboxAdapterScripts.ps1'
        workingDirectory: 'backend\src\Database\Command\Scripts\build'
    - task: PowerShell@2
      inputs:
        filePath: 'backend\src\Database\Command\Scripts\build\Add-SagaNotificationsScripts.ps1'
        workingDirectory: 'backend\src\Database\Command\Scripts\build'
    - task: PowerShell@2
      inputs:
        filePath: 'backend\src\Database\Command\Scripts\build\CopyArtifacts.ps1'
        arguments: '$(Build.ArtifactStagingDirectory)'
        workingDirectory: 'backend\src\Database\Command\Scripts\build'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'command-db-build'
        publishLocation: 'Container'
  - job: 'build_docker_command_db'
    dependsOn: build_command_db
    ${{ if eq(parameters['pool'], 'default') }}:
      pool:
        vmImage: ${{ variables['default-vm-image'] }}
    ${{ else }}:
      pool: ${{ parameters['pool'] }}
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'command-db-build'
        itemPattern: 'command-db-build/**'
        downloadPath: 'backend/src/Database/Command/AuctionhouseDatabase.Docker'
    - task: CopyFiles@2
      inputs:
        SourceFolder: backend/src/Database/Command/AuctionhouseDatabase.Docker/command-db-build
        TargetFolder: backend/src/Database/Command/AuctionhouseDatabase.Docker/buildArtifacts
    - task: Docker@2
      inputs:
        containerRegistry: ${{ parameters['docker-registry'] }}
        command: build
        Dockerfile: backend/src/Database/Command/AuctionhouseDatabase.Docker/Dockerfile
        buildContext: backend/src/Database/Command/AuctionhouseDatabase.Docker
        arguments: --target build
        tags: latest
        repository: pekalam/auctionhouse-sqlserver
    - task: Docker@2
      inputs:
        containerRegistry: 'AuctionhouseDockerRegistry'
        command: 'push'
        tags: latest
        repository: pekalam/auctionhouse-sqlserver
  - job: 'build_docker_infrastructure'
    displayName: 'Build infrastructure docker images'
    ${{ if eq(parameters['pool'], 'default') }}:
      pool:
        vmImage: ${{ variables['default-vm-image'] }}
    ${{ else }}:
      pool: ${{ parameters['pool'] }}
    steps:
    - task: DockerCompose@0
      displayName: 'Build images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: ${{ parameters['docker-registry'] }}
        dockerComposeFile: 'compose/infrastructure/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'build'
    - task: DockerCompose@0
      displayName: 'Push images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: ${{ parameters['docker-registry'] }}
        dockerComposeFile: 'compose/infrastructure/docker-compose.yml'
        action: 'Push services'
  - job: 'build_docker_infrastructure_mongodb'
    displayName: 'Build mongodb docker images'
    ${{ if eq(parameters['pool'], 'default') }}:
      pool:
        vmImage: ${{ variables['default-vm-image'] }}
    ${{ else }}:
      pool: ${{ parameters['pool'] }}
    steps:
    - task: DockerCompose@0
      displayName: 'Build images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: ${{ parameters['docker-registry'] }}
        dockerComposeFile: 'compose/infrastructure/mongodb/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'build'
    - task: DockerCompose@0
      displayName: 'Push images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: ${{ parameters['docker-registry'] }}
        dockerComposeFile: 'compose/infrastructure/mongodb/docker-compose.yml'
        action: 'Push services'
  - job: 'build_docker_webapi'
    displayName: 'Build Web API docker images'
    ${{ if eq(parameters['pool'], 'default') }}:
      pool:
        vmImage: ${{ variables['default-vm-image'] }}
    ${{ else }}:
      pool: ${{ parameters['pool'] }}
    steps:
    - task: DockerCompose@0
      displayName: 'Build images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: ${{ parameters['docker-registry'] }}
        dockerComposeFile: 'compose/webAPI/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'build'
    - task: DockerCompose@0
      displayName: 'Push images'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: ${{ parameters['docker-registry'] }}
        dockerComposeFile: 'compose/webAPI/docker-compose.yml'
        action: 'Push services'
  - job: 'publish_artifacts'
    displayName: 'Publish build artifacts'
    ${{ if eq(parameters['pool'], 'default') }}:
      pool:
        vmImage: ${{ variables['default-vm-image'] }}
    ${{ else }}:
      pool: ${{ parameters['pool'] }}
    dependsOn: ['build_docker_webapi', 'build_docker_infrastructure', 'build_docker_infrastructure_mongodb'] 
    steps:
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'compose'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/compose'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
- template: deploy-azure-vm.yml
